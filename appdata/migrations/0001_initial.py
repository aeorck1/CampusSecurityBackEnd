# Generated by Django 5.2.1 on 2025-05-28 17:13

import appdata.managers
import appdata.models.incident
import appdata.models.user
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="IncidentCategory",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "created_by_user",
                    models.JSONField(blank=True, verbose_name="Created by user"),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=128)),
            ],
            options={
                "verbose_name": "Incident Category",
                "verbose_name_plural": "Incident Categories",
                "db_table": "incident_category",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "created_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Created by user ID"
                    ),
                ),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "db_table": "role",
            },
            managers=[
                ("objects", appdata.managers.RoleManager()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.CharField(
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=255,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="Email Address",
                    ),
                ),
                ("username", models.CharField(max_length=64, unique=True)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("first_name", models.CharField(max_length=64)),
                ("last_name", models.CharField(max_length=64)),
                ("middle_name", models.CharField(max_length=64)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=appdata.models.user.upload_avatar,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        blank=True,
                        help_text="The role this user belongs to. A user will get all permissions granted to their role.",
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="user_set",
                        to="appdata.role",
                        verbose_name="role",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Account",
                "verbose_name_plural": "User Accounts",
                "db_table": "campus_security_user",
            },
        ),
        migrations.CreateModel(
            name="Incident",
            fields=[
                (
                    "date_created",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Date Created"
                    ),
                ),
                (
                    "date_last_modified",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Date Last Modified"
                    ),
                ),
                (
                    "last_modified_by_user",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Last modified by user"
                    ),
                ),
                (
                    "id",
                    models.CharField(
                        blank=True,
                        default=uuid.uuid4,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=256)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("LOW", "LOW"),
                            ("MEDIUM", "MEDIUM"),
                            ("HIGH", "HIGH"),
                        ],
                        max_length=32,
                    ),
                ),
                ("location", models.CharField(max_length=256)),
                ("latitude", models.FloatField(blank=True, null=True)),
                ("longitude", models.FloatField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ACTIVE", "ACTIVE"),
                            ("INVESTIGATING", "INVESTIGATING"),
                            ("RESOLVED", "RESOLVED"),
                        ],
                        default=appdata.models.incident.IncidentStatus["ACTIVE"],
                        max_length=32,
                    ),
                ),
                ("date_resolved", models.DateTimeField(blank=True, null=True)),
                ("reporter_satisfaction", models.FloatField(blank=True, null=True)),
                (
                    "created_by_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="incidents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        related_name="incidents", to="appdata.incidentcategory"
                    ),
                ),
            ],
            options={
                "verbose_name": "Incident",
                "verbose_name_plural": "Incidents",
                "db_table": "incident",
            },
        ),
    ]
